name: Build and Deploy

on:
  push:
    tags:
      - '*' 

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write 

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check current version of node
        run: node -v

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules_cache_{{ checksum "package-lock.json" }}

      - name: Install project dependencies
        run: |
            if [ ! -d "node_modules" ]; then
              npm ci -f
            fi

      - name: Run test cases
        run: npm run coverage

      - name: Store build artifact
        uses: actions/upload-artifact@v3
        with:
          name: discussions-middleware
          path: coverage

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_LOGIN }}
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}   

      - name: Build and Push Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: . 
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          visibility: public
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      #- name: Install SonarScanner
      #  run: |
      #      cd /tmp
      #      wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.1.0.4477.zip 
      #      unzip sonar-scanner-cli-6.1.0.4477.zip 
      #      cd -
            
  
      #- name: Run SonarScanner
      #  env:
      #    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #    SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION}}
      #    sonar.PROJECTKEY: ${{ secrets.PROJECTKEY}}
      #  run: |
      #      cat sonar-project.properties
      #      /tmp/sonar-scanner-6.1.0.4477/bin/sonar-scanner
